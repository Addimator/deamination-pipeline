configfile: "config/config.yaml"


accession = config["accession"]
chromosome_conf = config["sample"]
genome_config = config["sample"]
candidate = config["candidate"]
# chr_chromosomes = "chr" + str(config["chromosome"])


scattergather:
    split_candidates=20,


include: "rules/align_reads.smk"
include: "rules/avg_bedgraph.smk"
include: "rules/candidates.smk"
include: "rules/get_data.smk"


rule all:
    input:
        expand("results/{SRA}/assigned_bases.txt", SRA=accession),
        expand("results/{SRA}/meth.png", SRA=accession),
        expand("results/{SRA}/unmeth.png", SRA=accession),


rule find_bases:
    input:
        aligned_reads="resources/{SRA}/candidate_specific/alignment_{scatteritem}.bam",
        aligned_reads_index="resources/{SRA}/candidate_specific/alignment_{scatteritem}.bam.bai",
        # aligned_reads="resources/{SRA}/aligned-reads-focused.sam",
        candidates="resources/candidates_{scatteritem}.vcf",
        # candidates="resources/candidates_filtered_{scatteritem}.vcf",
    output:
        "results/{SRA}/all_pos_to_base/pos_to_bases_{scatteritem}.txt",
    conda:
        "envs/varlociraptor.yaml"
    params:
        pipeline_path=config["pipeline_path"],
        deamination_path=config["deamination_path"],
    log:
        "logs/find_bases_{SRA}_{scatteritem}.log",
    shell:
        """
        cd {params.deamination_path}
        cargo run  -- find-bases {params.pipeline_path}{input.aligned_reads} {params.pipeline_path}{input.candidates} {params.pipeline_path}{output}
       """


rule gather_calls:
    input:
        gather.split_candidates(
            "results/{{SRA}}/all_pos_to_base/pos_to_bases_{scatteritem}.txt"
        ),
    output:
        "results/{SRA}/pos_to_bases.txt",
    shell:
        "cat {input} > {output}"


rule c_to_t_rates:
    input:
        ref_bases="results/{SRA}/pos_to_bases.txt",
        bedGraph="resources/bed_avg.bedGraph",
    output:
        rates="results/{SRA}/c_to_t_rates.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/c_to_t_rates{SRA}.log",
    script:
        "scripts/plot_conversion_rates.py"


rule assign_bases:
    input:
        bedGraph=expand(
            "resources/bed_avg_{chromosome}.bedGraph", chromosome=config["chromosome"]
        ),
        # bedGraph="resources/alignments_CpG.bedGraph",
        ref_bases="results/{SRA}/pos_to_bases.txt",
    output:
        "results/{SRA}/assigned_bases.txt",
    conda:
        "envs/varlociraptor.yaml"
    params:
        pipeline_path=config["pipeline_path"],
        deamination_path=config["deamination_path"],
    log:
        "logs/assign_bases_{SRA}.log",
    shell:
        """
        cd {params.deamination_path}
        cargo run  -- assign-bases {params.pipeline_path}{input.bedGraph} {params.pipeline_path}{input.ref_bases} {params.pipeline_path}{output}
        """


rule plot_methylation_status:
    input:
        bedGraph=expand(
            "resources/bed_avg_{chromosome}.bedGraph", chromosome=config["chromosome"]
        ),
        # bedGraph="resources/bed_avg.bedGraph",
        # bedGraph="resources/alignments_CpG.bedGraph",
        ref_bases="results/{SRA}/pos_to_bases.txt",
    output:
        unmeth="results/{SRA}/unmeth.png",
        meth="results/{SRA}/meth.png",
    conda:
        "envs/plot.yaml"
    params:
        pipeline_path=config["pipeline_path"],
        deamination_path=config["deamination_path"],
    log:
        "logs/plot_methylation_status{SRA}.log",
    script:
        "scripts/plot_methylation_status.py"


# rule gather_calls:
#     input:
#         gather.split_candidates("results/pos_to_bases_{scatteritem}.txt")
#     output:
#         "resources/pos_to_bases.txt"
#     shell:
#         "cat {input} > {output}"
