configfile: "config/config.yaml"


accession = config["accession"]
genome_config = config["sample"]
candidate = config["candidate"]
chr_chromosome = "chr" + str(config["chromosome"])
chromosome = str(config["chromosome"])


scattergather:
    split_candidates=config["num_candidates"],


include: "rules/align_reads.smk"
include: "rules/avg_bedgraph.smk"
include: "rules/candidates.smk"
include: "rules/get_data.smk"


report: "report/workflow.rst"


rule all:
    input:
        # expand("results/{SRA}/number_bases.csv", SRA=accession),
        # expand("results/{SRA}/ratio_barplot.html", SRA=accession),
        expand("results/{SRA}/datavzrd-reports/", SRA=accession),


rule find_bases:
    input:
        bedGraph=expand(
            "resources/{chromosome}/bed_avg_{{scatteritem}}_filtered.bedGraph",
            chromosome=chromosome,
        ),
        aligned_reads="resources/{SRA}/candidate_specific/alignment_{scatteritem}.bam",
        aligned_reads_index="resources/{SRA}/candidate_specific/alignment_{scatteritem}.bam.bai",
    output:
        "results/{SRA}/all_pos_to_base/number_bases_{scatteritem}.csv",
    conda:
        "envs/varlociraptor.yaml"
    params:
        pipeline_path=config["pipeline_path"],
        deamination_path=config["deamination_path"],
    log:
        "logs/find_bases_{SRA}_{scatteritem}.log",
    shell:
        """
        cd {params.deamination_path}
        cargo run  {params.pipeline_path}{input.aligned_reads} {params.pipeline_path}{input.bedGraph} {params.pipeline_path}{output}
       """


rule gather_calls:
    input:
        gather.split_candidates(
            "results/{{SRA}}/all_pos_to_base/number_bases_{scatteritem}.csv"
        ),
    output:
        "results/{SRA}/number_bases_concat.csv",
    shell:
        """
        echo methylation_status,direction,orig_base,A,C,G,T,N > {output}
        cat {input} >> {output}
        """


rule number_nucleotides:
    input:
        "results/{SRA}/number_bases_concat.csv",
    output:
        "results/{SRA}/number_bases.csv",
    conda:
        "envs/plot.yaml"
    log:
        "logs/number_nucleotides_{SRA}.log",
    script:
        "scripts/merge_nucleotides.py"


rule plot_number_nucleotides:
    input:
        "results/{SRA}/number_bases.csv",
    output:
        "results/{SRA}/ratio_barplot.json",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_number_nucleotides_{SRA}.log",
    script:
        "scripts/barplot.py"


# Postprocessing GO Enrichment Data
# Generating Meta Comparison Datavzrd Reports
rule number_nucleotides_datavzrd:
    input:
        config="workflow/resources/datavzrd/number_nucleotides-template.yaml",
        table="results/{SRA}/number_bases.csv",
        plot="results/{SRA}/ratio_barplot.json",
    output:
        report(
            directory("results/{SRA}/datavzrd-reports/"),
            category=lambda wildcards: f"Datavzrd {wildcards.SRA}",
        ),
    # params:
    # pathway_db=config["enrichment"]["spia"]["pathway_database"],
    # species=config["resources"]["ref"]["species"],
    log:
        "logs/number_nucleotides_datavzrd_{SRA}.log",
    wrapper:
        "v5.5.0/utils/datavzrd"
